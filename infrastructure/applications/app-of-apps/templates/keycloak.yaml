apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: keycloak
  namespace: argocd
spec:
  destination:
    namespace: keycloak
    server: {{ .Values.spec.destination.server }}
  project: default
  source:
    repoURL: {{ .Values.spec.keycloak.repoUrl }}
    targetRevision: {{ .Values.spec.keycloak.targetRevision }}
    chart: keycloak
    helm:
        values: |
          keycloakConfigCli:
            enabled: true
            extraEnvVars:
              - name: KEYCLOAK_URL
                value: http://keycloak-headless.keycloak.svc.cluster.local:8080
            configuration:
              home.json: |
                {
                  "realm": "home",
                  "enabled": true,
                  "registrationAllowed": true,
                  "users": [
                    {
                      "username": "{{ .Values.spec.keycloak.username }}",
                      "enabled": true,
                      "email": "christopher.dokkeberg@gmail.com",
                      "firstName": "Christopher",
                      "lastName": "Dokkeberg",
                      "credentials": [
                        {
                          "type": "password",
                          "value": "ChangeMe123!"
                        }
                      ]
                    }
                  ],
                  "clients": [
                    {
                      "clientId": "portainer",
                      "name": "portainer-sso",
                      "rootUrl": "https://portainer.k3s.home/",
                      "baseUrl": "https://portainer.k3s.home/",
                      "adminUrl": "https://portainer.k3s.home/",
                      "enabled": true,
                      "clientAuthenticatorType": "client-secret",
                      "secret": "{{ .Values.spec.keycloak.clients.portainer.clientSecret }}",
                      "redirectUris": [
                        "https://portainer.k3s.home"
                      ],
                      "webOrigins": [
                        "https://portainer.k3s.home/#!/"
                      ],
                      "standardFlowEnabled": true,
                      "frontchannelLogout": true,
                      "protocol": "openid-connect",
                      "attributes": {
                        "backchannel.logout.session.required": "true",
                        "post.logout.redirect.uris": "https://portainer.k3s.home/#!/logout",
                        "oauth2.device.authorization.grant.enabled": "true"
                      },
                      "fullScopeAllowed": true
                    }
                  ]
                }
          global:
            postgresql:
              auth:
                username: bn_keycloak
                password: bn_keycloak
                database: bitnami_keycloak
          extraEnvVars:
            - name: KEYCLOAK_LOG_LEVEL
              value: DEBUG

          persistence:
            enabled: true  
            existingClaim: keycloak-pvc
          
          ingress:
            enabled: true
            hostname: {{ .Values.spec.keycloak.host }}
            ingressClassName: traefik
            path: /
            annotations:
                cert-manager.io/cluster-issuer: home-intermediate-ca-issuer
                cert-manager.io/common-name: "{{ .Values.spec.keycloak.host }}"
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
            tls: true
          
          proxy: edge

          auth:
            tls:
              enabled: false
              autogenerated: false
            createAdminUser: true
            adminUser: admin
            adminPassword: "ChangeMe123!"

          postgresql:
            enabled: true
            auth:
              username: bn_keycloak
              password: bn_keycloak
              database: bitnami_keycloak

          service:
            type: ClusterIP

          readinessProbe:
            httpGet:
              path: /realms/master
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5

          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
  syncPolicy:
    automated:
      prune: false
      selfHeal: true
      allowEmpty: false 
    syncOptions:
      - CreateNamespace=true
  ignoreDifferences:
  - group: batch
    kind: Job
    namespace: keycloak
    name: keycloak-keycloak-config-cli
    # Prevent ArgoCD from trying to "heal" finished Jobs
    # This tells ArgoCD: "Ignore this resource's status changes"
    jqPathExpressions:
      - .status
      - .metadata.annotations["helm.sh/hook"]
      - .metadata.annotations["helm.sh/hook-delete-policy"]