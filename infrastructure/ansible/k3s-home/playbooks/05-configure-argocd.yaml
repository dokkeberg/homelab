- name: Configure ArgoCD
  hosts: newvm
  collections:
  - kubernetes.core
  become: true
  tasks:
  - name: Add ArgoCD Helm repo
    ansible.builtin.command: helm repo add argo https://argoproj.github.io/argo-helm

  - name: Update Helm repos
    ansible.builtin.command: helm repo update

  - name: Install ArgoCD
    kubernetes.core.helm:
      name: argocd
      chart_ref: argo/argo-cd
      namespace: argocd
      create_namespace: true
      values:
        server:
          extraArgs:
            - --insecure
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  - name: Wait for ArgoCD to become available
    ansible.builtin.command: >
      kubectl wait -n argocd deployment/argocd-server --for=condition=available --timeout=90s
  
  - name: Check if ArgoCD CLI is installed
    ansible.builtin.stat:
      path: /usr/local/bin/argocd
    register: argocd_bin

  - name: Download and install ArgoCD CLI via curl if missing
    ansible.builtin.shell: |
      curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
      chmod 0555 /usr/local/bin/argocd
    args:
      creates: /usr/local/bin/argocd
    become: true
    when: not argocd_bin.stat.exists

  - name: Genrate random ARGOCD_OIDC_SECRET 
    ansible.builtin.set_fact:
      argocd_oidc_secret: "{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}"

  - name: Generate random PORTAINER_SECRET
    ansible.builtin.set_fact:
      portainer_secret: "{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}"

  - name: Login to ArgoCD
    ansible.builtin.shell: |
      argocd login --core
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  - name: Set kubectl context namespace to argocd
    ansible.builtin.shell: |
      kubectl config set-context --current --namespace=argocd
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  - name: Read CA cert file from proxmox
    ansible.builtin.slurp:
      src: "{{ lookup('env', 'HOME') }}/ansible-secrets/home-root-ca.crt"
    register: root_ca_encoded
    delegate_to: localhost
    become: false

  - name: Decode OIDC root CA cert
    set_fact:
      oidc_root_ca: "{{ root_ca_encoded.content | b64decode }}"

  - name: Create ArgoCD app 'infrastructure' with secret parameter
    ansible.builtin.shell: |
      argocd app create infrastructure \
        --repo https://github.com/dokkeberg/homelab \
        --path infrastructure/applications/app-of-apps \
        --dest-server https://kubernetes.default.svc \
        --dest-namespace argocd \
        --parameter "spec.keycloak.clients.portainer.clientSecret={{ portainer_secret }}" \
        --parameter "spec.keycloak.clients.argocd.clientSecret={{ argocd_oidc_secret }}" \
        --parameter "spec.argoCd.caCert={{ oidc_root_ca | quote }}"
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  - name: Sync ArgoCD app 'infrastructure'
    ansible.builtin.shell: |
      argocd app sync infrastructure
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  # - name: Wait for ArgoCD to become available
  #   ansible.builtin.command: >
  #     kubectl wait -n argocd deployment/argocd-server --for=condition=available --timeout=90s

  - name: Sync ArgoCD app 'argocd/argocd'
    ansible.builtin.shell: |
      argocd app sync argocd/argocd
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  # - name: Save ArgoCD OIDC secret
  #   ansible.builtin.command: >
  #     kubectl -n argocd patch secret argocd-secret --patch='{"stringData": { "oidc.keycloak.clientSecret": "{{ argocd_oidc_secret }}" }}'

  - name: Refresh ArgoCD app 'portainer'
    ansible.builtin.shell: |
      argocd app get portainer --hard-refresh
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true

  - name: Sync ArgoCD app 'portainer'
    ansible.builtin.shell: |
      argocd app sync portainer
    environment:
      HOME: /root
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    become: true