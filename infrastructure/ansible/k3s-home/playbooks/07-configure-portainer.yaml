- name: Configure portainer
  hosts: newvm
  become: true
  tasks:
  - name: Initialize Portainer admin account
    ansible.builtin.uri:
      url: https://portainer.k3s.home/api/users/admin/init
      method: POST
      body_format: json
      body:
        Username: "admin"
        Password: "ChangeMe123!"
      validate_certs: false
      status_code: 200
    retries: 15
    delay: 5
    register: portainer_init_result
    until: portainer_init_result.status == 200

  - name: Authenticate with Portainer API
    ansible.builtin.uri:
      url: https://portainer.k3s.home/api/auth
      method: POST
      body_format: json
      body:
        Username: "admin"
        Password: "ChangeMe123!"
      return_content: true
      validate_certs: false
    register: portainer_auth
    retries: 12
    delay: 5
    until: portainer_auth.status == 200

  - name: Extract JWT token
    ansible.builtin.set_fact:
      portainer_token: "{{ portainer_auth.json.jwt }}"

  - name: Get CA certificate from secret
    ansible.builtin.command: >
      kubectl get secret home-root-ca-secret -n cert-manager -o jsonpath='{.data.ca\.crt}'
    register: ca_cert_b64
    changed_when: false

  - name: Decode CA cert
    ansible.builtin.copy:
      content: "{{ ca_cert_b64.stdout | b64decode }}"
      dest: /tmp/ca-certificates.crt
      mode: '0644'

  - name: Confirm cert written
    stat:
      path: /tmp/ca-certificates.crt
    register: cert_written

  - name: Show cert file metadata
    debug:
      var: cert_written
  
  - name: Upload CA cert to Portainer
    ansible.builtin.shell: |
      http --ignore-stdin --verify=no --form POST https://portainer.k3s.home/api/upload/tls/ca \
        "Authorization:Bearer {{ portainer_token }}" \
        folder="/etc/ssl/certs" \
        file@/tmp/ca-certificates.crt
    register: upload_result
    changed_when: "'204' in upload_result.stdout or '204' in upload_result.stderr"
    failed_when: upload_result.rc != 0

  - name: Show result of upload
    debug:
      var: upload_result

  - name: Check if license file exists on proxmox
    ansible.builtin.stat:
      path: "{{ lookup('env', 'HOME') }}/ansible-secrets/portainer_license"
    register: license_file
    delegate_to: localhost
    become: false

  - name: Read license file from proxmox
    ansible.builtin.slurp:
      src: "{{ lookup('env', 'HOME') }}/ansible-secrets/portainer_license"
    register: portainer_license
    when: license_file.stat.exists
    delegate_to: localhost
    become: false

  - name: Attach license to Portainer from newvm
    ansible.builtin.shell: |
      http --ignore-stdin --verify=no POST https://portainer.k3s.home/api/licenses/add \
        "Authorization:Bearer {{ portainer_token }}" \
        "force==true" \
        key:="{{ portainer_license.content | b64decode | trim }}"
    register: license_result
    changed_when: "'200' in license_result.stdout or '200' in license_result.stderr"
    failed_when: license_result.rc != 0
    when: license_file.stat.exists

  - name: Update Portainer OIDC settings
    ansible.builtin.uri:
      url: https://portainer.k3s.home/api/settings
      method: PUT
      headers:
        Authorization: "Bearer {{ portainer_token }}"
      body_format: json
      body:
        AuthenticationMethod: 3
        OAuthSettings:
          AccessTokenURI: "https://keycloak.k3s.home/realms/home/protocol/openid-connect/token"
          AuthStyle: 0
          AuthorizationURI: "https://keycloak.k3s.home/realms/home/protocol/openid-connect/auth"
          ClientID: "portainer"
          ClientSecret: "{{ portainer_secret }}"
          LogoutURI: "https://keycloak.k3s.home/realms/home/protocol/openid-connect/logout"
          OAuthAutoCreateUsers: true
          RedirectURI: "https://portainer.k3s.home/"
          ResourceURI: "https://keycloak.k3s.home/realms/home/protocol/openid-connect/userinfo"
          SSO: true
          Scopes: "openid email profile"
          UserIdentifier: "preferred_username"
      validate_certs: false