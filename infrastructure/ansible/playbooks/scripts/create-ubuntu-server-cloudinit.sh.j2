#! /bin/bash

VMID={{ VMID }}
VMIP={{ VMIP }}
STORAGE=local-lvm

set -x
wget -qN https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img
qemu-img resize noble-server-cloudimg-amd64.img 128G
qm destroy $VMID
qm create $VMID --name "ubuntu-2404-template" --ostype l26 \
    --memory 16384 --balloon 1 \
    --agent 1 \
    --bios ovmf --machine q35 --efidisk0 $STORAGE:0,pre-enrolled-keys=0 \
    --cpu host --cores 6 --numa 1 \
    --vga serial0 --serial0 socket  \
    --net0 virtio,bridge=vmbr0,mtu=1
qm importdisk $VMID noble-server-cloudimg-amd64.img $STORAGE
qm set $VMID --scsihw virtio-scsi-pci --virtio0 $STORAGE:vm-$VMID-disk-1,discard=on
qm set $VMID --boot order=virtio0
qm set $VMID --ide2 $STORAGE:cloudinit

mkdir -p /var/lib/vz/snippets
cat << OUTER_EOF | tee /var/lib/vz/snippets/ubuntu.yaml
#cloud-config
runcmd:
    - apt-get update
    - apt-get install -y qemu-guest-agent
    - apt-get install httpie -y
    - apt-get install jq

    #k3s
    - curl -sfL https://get.k3s.io | sh -
    - sudo snap install helm --classic
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
 
    #dns
    - |
        kubectl -n kube-system get configmap coredns -o json | \
        jq '.data.Corefile += "\nk3s.home:53 {\n  forward . 192.168.1.1\n  cache 30\n  log\n}\n"' | \
        kubectl apply -f - && \
        kubectl -n kube-system delete pod -l k8s-app=kube-dns

    # argocd
    - helm repo add argo https://argoproj.github.io/argo-helm
    - helm repo update
    - helm install argocd argo/argo-cd   --namespace argocd --create-namespace   --set server.extraArgs="{--insecure}"
    - kubectl wait -n argocd deployment/argocd-server --for=condition=available --timeout=90s

    #argocd-cli
    - curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
    - rm argocd-linux-amd64

    #argocd-app-of-apps
    - export HOME=/root
    - argocd login --plaintext --insecure --core
    - kubectl config set-context --current --namespace=argocd
    - |
        PORTAINER_SECRET=$(openssl rand -hex 16)
        argocd app create infrastructure --repo https://github.com/dokkeberg/homelab --path infrastructure/applications/app-of-apps \
        --dest-server https://kubernetes.default.svc --dest-namespace argocd --plaintext --insecure \
        --parameter "spec.keycloak.clients.portainer.clientSecret=$PORTAINER_SECRET"
    - argocd app sync infrastructure --insecure --plaintext
    - argocd app sync argocd/argocd --insecure --plaintext

    #portainer
    - kubectl wait svc portainer -n portainer --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' --timeout=60s
    - kubectl wait --for=create secret home-root-ca-secret -n cert-manager
    - kubectl wait --for=create secret portainer-cert-tls -n portainer

    - |
        until http --ignore-stdin --verify=no --check-status \
          POST https://portainer.k3s.home/api/users/admin/init \
          Username="admin" Password="ChangeMe123!"; do
            echo "Waiting for Portainer API to become ready..."
            sleep 5
        done
        
        

        echo "Fetching JWT"

        until http --ignore-stdin POST https://portainer.k3s.home/api/auth Username="admin" \
            Password="ChangeMe123!" --verify=no; do
            echo "Waiting for auth API to become ready..."
            sleep 5
        done

        http --ignore-stdin --verify=no POST https://portainer.k3s.home/api/auth Username="admin" \
            Password="ChangeMe123!" > /tmp/portainer_token.json
        
        echo "Json content"
        cat /tmp/portainer_token.json

        PORTAINER_TOKEN=$(jq -r ".jwt" /tmp/portainer_token.json)
           
        echo "JWT Value"
        echo "${PORTAINER_TOKEN]"
        kubectl get secret home-root-ca-secret -n cert-manager -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/selfsigned_ca.crt
        
        echo "CA cert"
        cat /tmp/selfsigned_ca.crt
        
        sleep 5
        echo "Updating CA cert"
        http --ignore-stdin --verify=no --form POST https://portainer.k3s.home/api/upload/tls/ca \
            "Authorization:Bearer ${PORTAINER_TOKEN}" \
            folder="/etc/ssl/certs/ca-certificates" \
            file@/tmp/selfsigned_ca.crt
                
        echo "Updating SSO"
        http --ignore-stdin --verify=no PUT https://portainer.k3s.home/api/settings "Authorization:Bearer ${PORTAINER_TOKEN}" \
            "OAuthSettings":='{ 
                "AccessTokenURI": "https://keycloak.k3s.home/realms/home/protocol/openid-connect/token", 
                "AuthStyle": 0, 
                "AuthorizationURI": "https://keycloak.k3s.home/realms/home/protocol/openid-connect/auth", 
                "ClientID": "portainer", 
                "ClientSecret": "$PORTAINER_SECRET", 
                "LogoutURI": "https://keycloak.k3s.home/realms/home/protocol/openid-connect/logout", 
                "OAuthAutoCreateUsers": true, 
                "RedirectURI": "https://portainer.k3s.home/", 
                "ResourceURI": "https://keycloak.k3s.home/realms/home/protocol/openid-connect/userinfo", 
                "SSO": true, 
                "Scopes": "openid email profile", 
                "UserIdentifier": "preferred_username" 
            }'

    # finish setup
    - systemctl enable ssh
    - reboot
OUTER_EOF

qm set $VMID --cicustom "vendor=local:snippets/ubuntu.yaml"
qm set $VMID --ciuser $USER
qm set $VMID --sshkeys ~/.ssh/authorized_keys
qm set $VMID --ipconfig0 ip=$VMIP/24,gw=192.168.1.1 --nameserver 192.168.1.1
qm template $VMID
