#! /bin/bash

VMID={{ VMID }}
VMIP={{ VMIP }}
STORAGE=local-lvm

set -x
wget -qN https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img
qemu-img resize noble-server-cloudimg-amd64.img 128G
qm destroy $VMID
qm create $VMID --name "ubuntu-2404-template" --ostype l26 \
    --memory 16384 --balloon 1 \
    --agent 1 \
    --bios ovmf --machine q35 --efidisk0 $STORAGE:0,pre-enrolled-keys=0 \
    --cpu host --cores 6 --numa 1 \
    --vga serial0 --serial0 socket  \
    --net0 virtio,bridge=vmbr0,mtu=1
qm importdisk $VMID noble-server-cloudimg-amd64.img $STORAGE
qm set $VMID --scsihw virtio-scsi-pci --virtio0 $STORAGE:vm-$VMID-disk-1,discard=on
qm set $VMID --boot order=virtio0
qm set $VMID --ide2 $STORAGE:cloudinit

mkdir -p /var/lib/vz/snippets
cat << EOF | tee /var/lib/vz/snippets/ubuntu.yaml
#cloud-config
runcmd:
    - apt-get update
    - apt-get install -y qemu-guest-agent

    #k3s
    - curl -sfL https://get.k3s.io | sh -
    - sudo snap install helm --classic
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
 
    # argocd
    - helm repo add argo https://argoproj.github.io/argo-helm
    - helm repo update
    - helm install argocd argo/argo-cd   --namespace argocd --create-namespace   --set server.extraArgs="{--insecure}"
    - kubectl wait -n argocd deployment/argocd-server --for=condition=available --timeout=90s

    #argocd-cli
    - curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
    - rm argocd-linux-amd64

    #argocd-app-of-apps
    - export HOME=/root
    - argocd login --plaintext --insecure --core
    - kubectl config set-context --current --namespace=argocd
    - argocd app create infrastructure --repo https://github.com/dokkeberg/homelab --path infrastructure/applications/app-of-apps --dest-server https://kubernetes.default.svc --dest-namespace argocd --plaintext --insecure
    - argocd app sync infrastructure --insecure --plaintext
    - argocd app sync argocd/argocd --insecure --plaintext

    # finish setup
    - systemctl enable ssh
    - reboot
EOF

qm set $VMID --cicustom "vendor=local:snippets/ubuntu.yaml"
qm set $VMID --ciuser $USER
qm set $VMID --sshkeys ~/.ssh/authorized_keys
qm set $VMID --ipconfig0 ip=$VMIP/24,gw=192.168.1.1
qm template $VMID
